#!/usr/bin/env python

import math
import time
import rospy
import numpy


from sensor_msgs.msg    import Range

from geometry_msgs.msg  import PoseStamped

class UWBToFPositioning():
    '''
        ROS Node that takes the distance position between nodes
        and calculates the x-y position of each node relative to
        node 1, the origin of the relative frame. 
    '''

    def __init__(self) :
        '''
            Initializatio of the node that computes position using TOF data
        '''

        # Init node
        rospy.init_node('UWB_ToF_Positioning', anonymous = True)

        # Calibrated UWB offset
        self.uwb_range_offset = rospy.get_param("~uwb_range_offset", 0.2)

        # Max time delay for the reception of messages
        self.max_pos_delay = rospy.get_param("~max_pos_delay", 0.2)

        # Minimum number for the node ID allowed
        self.uwb_min_id = rospy.get_param("~uwb_min_id", 1)

        # Control printing of information
        self.verbose = rospy.get_param('~verbose', True)

        # Number of nodes in the sequence for TOF (Nodes in the network)
        self.number_tof_nodes = rospy.get_param("~number_tof_nodes", 6)

        # SUBSCRIBER Topic format for tof data (distances)
        self.uwb_tof_topic_format = rospy.get_param("~uwb_tof_topic_format", "/uwb/tof/{}/{}/distance")

        # UWB measurments, distances and difference ditances
        self.uwb_ranges = numpy.zeros([self.number_tof_nodes, self.number_tof_nodes])

        # Height
        self.anchor_z = numpy.zeros(self.number_tof_nodes)

        # Stamps
        self.uwb_stamps = [rospy.Time() for _ in range(self.number_tof_nodes)]#TODO
        self.tdoa_stamps = [rospy.Time() for _ in range(self.number_tof_nodes)]


        # UWB Callbacks
        self.uwb_subs = [[None for _ in range(self.number_tof_nodes)] for _ in range(self.number_tof_nodes)]
        for i in range(self.uwb_min_id, self.number_tof_nodes+1) :
            for j in range(self.uwb_min_id, self.number_tof_nodes+1) :
                if i is not j :
                    self.uwb_subs[i-self.uwb_min_id][j-self.uwb_min_id] = rospy.Subscriber(self.uwb_tof_topic_format.format(i,j), Range, self.uwb_range_cb, (i-self.uwb_min_id, j-self.uwb_min_id))

       
        # PUBLISHER format for the positions computed from TOF
        self.uwb_tof_pub_topic_format = rospy.get_param("~uwb_tof_pub_topic_format", "/uwb/anchor/{}/pose")
        self.tof_pos_publishers = []
        for idx in range(self.uwb_min_id, self.number_tof_nodes+1) :
            self.tof_pos_publishers.append(
                rospy.Publisher(
                    self.uwb_tof_pub_topic_format.format(idx),
                    PoseStamped,
                    queue_size=10
                )
            )
        
        # Initializing vector for positions
        self.anchor_positions = []

        # LE Variables
        self.tdoa_position = None
        self.le_limitx = None
        self.le_limity = None

    def get_node_mocap_pose_cb(self,msg,ids):
        '''
            Update UWB node mocap positions z
        ''' 
        self.anchor_z[ids] = msg.pose.position.z

    def uwb_range_cb(self, range, ids) :
        '''
            Update UWB range from idx to jdx
        '''

        idx, jdx = ids[0], ids[1]
        self.uwb_ranges[idx][jdx] = range.range - self.uwb_range_offset
        if self.uwb_ranges[idx][jdx] < 0 :
            self.uwb_ranges[idx][jdx] = 0
        self.uwb_stamps[idx] = range.header.stamp #rospy.Time.now()

    def calculate_relative_poses(self, target) :
        '''
            Calculates relative poses of nodes doing TOF
        '''

        if 0 in [1 if rospy.Time.now() - stamp < rospy.Duration.from_sec(self.max_pos_delay) else 0 for stamp in self.uwb_stamps] :
            rospy.logwarn("Some messages are late in node! -- {}".format(rospy.Duration.from_sec(self.max_pos_delay)))
            rospy.logwarn([(rospy.Time.now() - stamp).to_sec() for stamp in self.uwb_stamps])
            return

        positions = [numpy.zeros(2) for _ in range(self.number_tof_nodes)]
        positions[0] = numpy.array([0, 0])

        proper_ranges = numpy.zeros((self.number_tof_nodes,self.number_tof_nodes))
        for i in range(self.number_tof_nodes) :
            for j in range(self.number_tof_nodes) :
                if self.uwb_ranges[i][j] > 0 :
                    proper_ranges[i][j] = self.uwb_ranges[i][j] * math.cos( 
                        numpy.arcsin( 
                            abs( 
                                (self.anchor_z[i] - self.anchor_z[j]) / self.uwb_ranges[i][j] 
                            )
                        )
                    )

        d12 = (proper_ranges[0][1] + proper_ranges[1][0]) / 2
        positions[1] = numpy.array([d12, 0]) 

        thetas = [0]
        
        iterative_positions = False

        if iterative_positions :
            for idx in range(2, self.number_tof_nodes) :

                arg = (
                    proper_ranges[0][idx-1]**2 + proper_ranges[0][idx]**2 - proper_ranges[idx][idx-1]**2
                ) / (2 * proper_ranges[0][idx-1] * proper_ranges[0][idx])

                theta = math.acos( arg )  + thetas[-1]
                thetas.append(theta)
                x = math.cos(theta)*proper_ranges[0][idx]
                y = math.sin(theta)*proper_ranges[0][idx]
                positions[idx]=numpy.array([x,y])      
                # print(positions) 
        else :
            for idx in range(2, self.number_tof_nodes) :

                arg = (
                    proper_ranges[0][1]**2 + proper_ranges[0][idx]**2 - proper_ranges[idx][1]**2
                ) / (2 * proper_ranges[0][1] * proper_ranges[0][idx])

                theta = math.acos( arg )
                thetas.append(theta)
                x = math.cos(theta)*proper_ranges[0][idx]
                y = math.sin(theta)*proper_ranges[0][idx]
                positions[idx]=numpy.array([x,y])   
        
        self.anchor_positions = positions 

        # Publish data of ToF
        pos = PoseStamped()
        pos.header.stamp = rospy.Time.now()
        for idx, p in enumerate(self.anchor_positions) :
            pos.pose.position.x = p[0]
            pos.pose.position.y = p[1]
            # pos.pose.position.z = p[2] TODO
            self.tof_pos_publishers[idx].publish(pos)

    def _fill_posestamped(self, array_pos) :
        pos = PoseStamped()
        pos.header.stamp = rospy.Time.now()
        pos.pose.position.x = array_pos[0]
        pos.pose.position.y = array_pos[1]
        return pos

    def run(self) :
        '''
            Create timer to update positions.
        '''

        # Set filter update timer at 6 Hz
        time.sleep(1)
        rospy_check_rate = rospy.Rate(10.0)
        self.tof_timer = rospy.Timer(rospy.Duration(0.2), self.calculate_relative_poses)
        
        rospy.loginfo("Starting ToF Position Calculations...")
        try:

            while not rospy.is_shutdown() :               
                rospy_check_rate.sleep()

        except KeyboardInterrupt :
            rospy.logerr('Keyboard Interrupt detected!')

        self.tof_timer.shutdown()

if __name__ == '__main__':
    '''
        Run the node for positioning nodes using TOF data
    '''
    # Initialization of the node
    position_calculator = UWBToFPositioning()

    try:
        time.sleep(3)
        # Run the position calculation 
        position_calculator.run()
        pass

    except rospy.ROSInterruptException:
        position_calculator.filter_timer.shutdown()
        rospy.loginfo("UWB Multilateral Position Calculation Stopped.")
